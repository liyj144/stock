#coding=utf-8

from __future__ import print_function
from __future__ import print_function
from __future__ import division
import pandas as pd
import logging
import logging.config
import os
import math
from arch import arch_model
from sqlalchemy import create_engine, Table, MetaData, Column, Integer, Float, REAL, Date, String, and_
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import sqlite3
import pudb

logging.config.fileConfig('logging.conf')
logger = logging.getLogger('main')

BaseModel = declarative_base()


class Trd(BaseModel):
    __tablename__ = 't_trd'
    id = Column(Integer, primary_key=True, autoincrement=True)
    Stkcd = Column(Integer)
    Trddt = Column(String(32))
    Dnvaltrd = Column(Float)
    Dsmvosd = Column(Float)
    Dretnd = Column(Float)

class Idx(BaseModel):
    __tablename__ = 't_idx'
    id = Column(Integer, primary_key=True, autoincrement=True)
    Idxtrd01 = Column(String(32))
    Idxtrd08 = Column(Float)


class Result(BaseModel):
    __tablename__ = 't_result'
    id = Column(Integer, primary_key=True, autoincrement=True)
    stockfode = Column(Integer)
    date = Column(String(32))
    T = Column(Float)
    Mv = Column(Float)
    Rm = Column(Float)
    Ri = Column(Float)
    STDi = Column(Float)
    STDm = Column(Float)
    NRM = Column(Float)
    YRM = Column(Float)
    TM = Column(Float)

    def as_dict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}


class Result2(BaseModel):
    __tablename__ = 't_result2'
    id = Column(Integer, primary_key=True, autoincrement=True)
    stockfode = Column(Integer)
    date = Column(String(32))
    T = Column(Float)
    Mv = Column(Float)
    Rm = Column(Float)
    Ri = Column(Float)
    STDi = Column(Float)
    STDm = Column(Float)
    NRM = Column(Float)
    YRM = Column(Float)
    TM = Column(Float)

    def as_dict(self):
        return {c.name: getattr(self, c.name) for c in self.__table__.columns}



class DataManager:
    '''
    股票数据处理
    '''
    engine = create_engine('sqlite:///stock.db', echo=False)
    conn = sqlite3.connect('stock.db')
    DBSession = sessionmaker(bind=engine)
    session = DBSession()
    excel_dir = '/wls/stock/xls/'
    once = 1000

    # 创建db
    def createDb(self):
        BaseModel.metadata.create_all(self.engine)

    #  drop result
    def dropResult(self):
        Result.__table__.drop(self.engine)

    # 清空result表
    def deleteResult(self):
        self.session.query(Result).delete()
        self.session.commit()

    # 导入trd、idx基础数据到sqlite数据库(trd 表)
    def importData(self):
        arFile = os.listdir(self.excel_dir)
        counter = 0
        for file in arFile:
            if file[0] == '.':
                continue
            counter += 1
            logger.info("Start to import " + str(counter) + " file: " + file)
            try:
                df = pd.read_excel(self.excel_dir + file)
                if file[0:3] == 'TRD':
                    df.to_sql('t_trd', self.engine, index=False, if_exists='append')
                elif file[0:3] == 'IDX':
                    df.to_sql('t_idx', self.engine, index=False, if_exists='append')
            except Exception as e:
                logger.error(e.message)

    '''
    处理数据 （结果保存至 result 表）
    start_pos: 起始位置
    with_check: 是否检查记录唯一性
    '''
    def managerData(self, start_pos=0, with_check=False):
        count = self.session.query(Trd).filter(Trd.id.__gt__(start_pos)).count()
        logger.info(count)
        loops = int(math.ceil(count / self.once))
        for i in xrange(loops):
            start = i * self.once
            end = (i + 1) * self.once - 1
            logger.info("Start to manage from " + str(start) + " to " + str(end))
            arTrd = self.session.query(Trd).filter(Trd.id.__gt__(start_pos)).offset(start).limit(self.once).all()
            # arTrd = self.session.query(Trd).filter(Trd.Stkcd == 600004).offset(start).limit(self.once).all()
            # arTrd = self.session.query(Trd).filter(and_(Trd.Stkcd == 600004, Trd.Trddt == '2012-01-04')).offset(start).limit(self.once).all()
            for trd in arTrd:
                if with_check:
                    check_trd = self.session.query(Result).filter(and_(Result.stockfode == trd.Stkcd, Result.date == trd.Trddt)).first()
                    if check_trd:
                        logger.info("check %d at %s already exist" % (trd.Stkcd, trd.Trddt))
                        continue
                idx = self.session.query(Idx).filter(Idx.Idxtrd01 == trd.Trddt).first()
                if not idx:
                    logger.error(trd.Trddt + ' is not ok')
                    continue
                o_result = self.computeData(trd, idx.Idxtrd08)
                try:
                    self.session.add(o_result)
                    self.session.commit()
                except Exception as e:
                    self.session.rollback()
                    logger.error("Error insert %s" % e.message)

    def manageDataCore(self, start_pos=0, with_check=False):
        count = self.session.query(Trd).filter(Trd.id.__gt__(start_pos)).count()
        logger.info(count)
        loops = int(math.ceil(count / self.once))
        for i in xrange(loops):
            start = i * self.once
            end = (i + 1) * self.once - 1
            logger.info("Start to manage from " + str(start) + " to " + str(end))
            arTrd = self.session.query(Trd).filter(Trd.id.__gt__(start_pos)).offset(start).limit(self.once).all()
            for trd in arTrd:
                # print(trd.Stkcd)
                # print(trd.Trddt)
                # return False
                if with_check:
                    check_trd = self.session.query(Result).filter(
                        and_(Result.stockfode == trd.Stkcd, Result.date == trd.Trddt)).first()
                    if check_trd:
                        logger.info("check %d at %s already exist" % (trd.Stkcd, trd.Trddt))
                        continue
                idx = self.session.query(Idx).filter(Idx.Idxtrd01 == trd.Trddt).first()
                if not idx:
                    logger.error(trd.Trddt + ' is not ok')
                    continue
                ar_result = self.computeData(trd, idx.Idxtrd08)
                row = ((ar_result.stockfode, ar_result.date, ar_result.T, ar_result.Mv, ar_result.Rm,
                       ar_result.Ri, ar_result.STDi, ar_result.STDm, ar_result.NRM, ar_result.YRM, ar_result.TM))
                cur = self.conn.cursor()
                cur.execute("INSERT INTO t_result (stockfode, date, T, Mv, Rm, Ri, STDi, STDm, NRM, YRM, TM) VALUES (?,?,?,?,?,?,?,?,?,?,?)", row)
            self.conn.commit()

    # 根据trd 和 idx 计算目标值
    def computeData(self, trd, idx):
        ar_result = Result()
        ar_result.stockfode = trd.Stkcd
        ar_result.date = trd.Trddt
        ar_result.T = trd.Dnvaltrd / (trd.Dsmvosd * 1000)
        ar_result.Mv = trd.Dsmvosd * 1000
        ar_result.Rm = idx / 100
        ar_result.Ri = trd.Dretnd - ar_result.Rm
        # 使用Dretnd 进行arch模型计算
        ar_result.STDi = 0
        # 使用Rm 记性arch模型计算
        ar_result.STDm = 0
        ar_result.NRM = ar_result.Rm if ar_result.Rm <= 0 else 0
        ar_result.YRM = ar_result.Rm if ar_result.Rm > 0 else 0
        ar_result.TM = abs(trd.Dretnd / ar_result.T)
        return ar_result

    # 导出数据
    def exportData(self, ar):
        #ar = [2.3, 2.5, 2.4, 1, 2, 3.2]
        #ar = [0.004847, -0.012862, 0.011401, 0.019324, 0.020537, -0.012384, 0, -0.012539, 0.001587, 0.031696, -0.00768, 0.012384, 0.004587, -0.009132, -0.00768, -0.009288, 0.015625, 0.007692, 0.001527, -0.019817, 0.020218, -0.001524, 0.001527, -0.004573, 0, 0.016845, -0.003012, -0.006042, 0.00152, 0.004552, 0.012085, 0, 0.014925, 0.005882, -0.004386, -0.005874, 0.001477, 0.011799, -0.004373, -0.011713, -0.004444, 0.00744, 0.01034, -0.001462, 0.010249, -0.027536, 0.004471, 0.038576, 0.002857, -0.017094]
        #ar = [0.004847, -0.012862, 0.011401, 0.019324, 0.020537, -0.012384, 0, -0.012539, 0.001587, 0.031696, -0.00768, 0.012384, 0.004587, -0.009132, -0.00768, -0.009288, 0.015625, 0.007692, 0.001527, -0.019817, 0.020218, -0.001524, 0.001527, -0.004573, 0, 0.016845, -0.003012, -0.006042, 0.00152, 0.004552, 0.012085, 0, 0.014925, 0.005882, -0.004386, -0.005874, 0.001477, 0.011799, -0.004373, -0.011713, -0.004444, 0.00744, 0.01034, -0.001462, 0.010249, -0.027536, 0.004471, 0.038576, 0.002857, -0.017094, 0.017391, -0.002849, -0.005714, 0, -0.001437, -0.023022, -0.017673, 0.010495, 0.023739, -0.002899, 0, 0.011628, 0.008621, 0.008547, -0.001412, -0.008487, -0.007133, 0.020115, 0.002817, -0.004213, -0.004231, 0.002833, 0.00565, -0.005618, -0.002825, 0.01983, 0.002778, 0.015235, 0.015007, -0.00672, -0.018945, 0.006897, -0.00137, 0.004115, -0.001366, -0.010944, 0.020747, -0.01355, -0.017857, 0.011189, -0.009682, -0.00838, -0.008451, 0.009943, 0.009845, -0.008357, -0.004213, -0.00141, -0.029661, 0.005822, 0.001447, -0.008671, 0.005831, 0.007246, -0.007194, 0.010145, -0.004304, 0.001441, 0.007194, -0.012857, -0.002894, -0.005806, -0.008759, 0, -0.004418, 0.007396, 0.005874, 0.007299, 0.010145, -0.015782, 0.01312, -0.020144, -0.004405, 0.001475, 0.002946, 0.001468, -0.017595, -0.010448, 0.003017, 0.031579, -0.002915, -0.001462, 0.001464, -0.071638, -0.018898, 0.012841, -0.006339, 0, 0.007974, -0.007911, 0.007974, 0.012658, 0.007813, 0, 0.006202, 0, -0.020031, 0.006289, -0.007813, -0.00315, 0.00316, 0, 0.006299, -0.004695, -0.001572, -0.011024, -0.020701, 0.013008, 0.019262, 0.001575, 0.017296, 0.004637, -0.016923, 0.00939, 0.010853, 0.021472, -0.004505, -0.006033, 0.004552, -0.006042, 0.007599, -0.024133, 0.001546, 0.010802, -0.012214, -0.009274, 0.014041, -0.004615, -0.009274, 0.017161, 0.035276, -0.008889, 0.017937, -0.010279, 0.001484, 0.005926, -0.004418, 0.011834, 0.002924, 0.002915, -0.013081, -0.001473, -0.00885, -0.014881, -0.007553, -0.012177, 0.007704, 0.003058, 0.004573, 0.010622, 0.007508, -0.00149, 0.001493, 0, -0.020864, -0.001522, 0.010671, -0.006033, -0.00607, -0.027481, 0.009419, 0.017107, -0.013761, 0.012403, -0.003063, 0.006144, -0.006107, -0.015361, 0.00156, -0.006231, 0.009404, 0.003106, 0.009288, 0.021472, -0.006006, 0.012085, 0.00597, -0.010386, 0.002999, -0.007474, 0.031627, 0.008759, -0.008683, 0.00292, 0.010189, 0.01585, -0.004255, 0.008547, -0.001412, -0.01273, 0.008596, 0.007102, -0.00141, 0.001412, 0.002821, -0.005626, -0.004243, -0.012784, 0.023022, 0.005626, -0.001399, 0.02381, -0.002736, 0.026063, -0.006684, -0.010767, -0.019048, 0.002774, 0.047026, -0.007926, 0.018642, -0.00915, 0, 0.006596, -0.002621, 0.009198, 0.002604, 0.003896, -0.003881, -0.018182, 0.01455, -0.031291, -0.005384, 0.008119, -0.018792, -0.002736, 0.021948, -0.001342, -0.024194, 0.009642, 0.017735, -0.012064, 0.005427, 0.004049, -0.020161, -0.015089, -0.009749, -0.005626, -0.002829, 0.004255, 0.015537, 0, -0.009736, 0.002809, -0.007003, -0.004231, -0.024079, 0.002903, 0.001447, -0.001445, -0.001447, -0.024638, 0.011887, -0.002937, 0.002946, -0.008811, 0.008889, 0.007342, -0.004373, -0.007321, 0.017699, 0.010145, -0.017217, 0.008759, 0.001447, -0.008671, 0.002915, 0.011628, 0.005747, -0.001429, -0.008584, -0.015873, 0.001466, 0.001464, -0.010234, 0.002954, 0.010309, 0.010204, 0.007215, 0.005731, -0.007123, -0.008608, 0.005789, 0, 0.010072, 0.001425, -0.001422, 0.004274, 0.011348, -0.01122, -0.008511, -0.011445, -0.002894, -0.024673, 0.002976, 0, 0.001484, -0.016296, -0.01506, 0.001529, -0.045802, 0, -0.0048, 0.008039, 0.00319, 0.00318, -0.001585, -0.004762, 0.004785, 0.001587, -0.026941, 0.004886, 0.025932, 0.026856, -0.012308, 0.006231, 0.00774, -0.00768, -0.006192, -0.015576, 0.009494, 0.015674, -0.00463, 0.00155, -0.063468, -0.013223, 0.001675, 0.008361, 0.00995, 0.001642, 0.004918, 0.003263, 0, -0.003252, 0.003263, 0.011382, 0.004823, -0.0048, -0.004823, -0.006462, 0.003252, -0.003241, 0.003252, 0.001621, -0.003236, 0.021104, 0.006359, 0.011058, 0.0125, 0.044753, -0.035451, 0.041348, -0.001471, -0.029455, 0.022762, 0.040059, 0.072753, -0.038564, 0.002766, -0.011034, 0.002789, -0.036161, 0.001443, 0.010086, -0.005706, -0.012912, -0.020349, 0, 0.004451, 0.008863, 0.021962, -0.017192, 0.01895, 0.004292, 0.007123, -0.029703, -0.002915, 0.004386, 0.011645, -0.011511, -0.017467, -0.004444, -0.010417, 0.004511, -0.011976, 0.024242, 0.031065, -0.004304, -0.004323, 0.001447, -0.010116, -0.010219, -0.010324, 0.00149, 0.004464, -0.01037, 0.005988, 0.013393, 0.020558, -0.005755, 0.01013, 0.015759, 0, 0.011283, -0.013947, 0.004243, 0.004225, 0, -0.025245, 0.018705, 0.018362, -0.006935, -0.002793, 0, 0.008403, 0.005556, 0.015193, -0.006803, -0.017808, 0.008368, -0.027663, 0.002845, -0.01844, -0.013006, 0.040996, 0.004219, -0.030812, 0.015896, -0.00569, -0.005722, -0.001439, -0.008646, -0.018895, -0.007407, 0.00597, -0.011869, -0.013514, -0.010654, 0.018462, -0.003021, 0.006061, -0.006024, -0.007576, 0.00916, 0.02118, 0, 0.004444, -0.007375, 0.001486, 0.001484, -0.004444, -0.004464, 0.019432, 0.001466, 0.02489, 0.018571, 0.001403, -0.004202, -0.007032, 0.005666, 0, -0.016901, 0.027221, -0.019526, -0.00569, -0.004292, 0.015805, 0.009901, -0.004202, -0.009845, 0, -0.005682, -0.038571, -0.001486, -0.008929, 0.009009, -0.002976, 0.008955, 0, 0.002959, -0.016224, 0.025487, 0.011696, 0, -0.00289, 0.002899, 0.013006, 0, -0.00428, 0.005731, -0.009972, 0.004317, 0.010029, -0.004255, 0.008547, 0.001412, -0.007052, -0.005682, -0.001429, 0.002861, 0.005706, -0.022695, 0.001451, -0.002899, 0.017442, -0.015714, -0.017417, 0.01034, 0.008772, 0.007246, 0.005755, -0.007153, 0, -0.012968, 0.016058, 0.008621, -0.005698, -0.004298, 0.004317, -0.010029, 0.001447, 0.014451, -0.004274, 0.008584, -0.001418, -0.007102, 0.005722, -0.012802, 0.005764, -0.002865, -0.014368, 0.007289, -0.001447, -0.004348, 0.008734, 0, -0.004329, 0.011594, -0.001433, -0.004304, -0.002882, -0.013006, 0.004392, 0.007289, 0.002894, 0.008658, 0.001431, 0.001429, 0.00428, 0.00142, 0.004255, 0.004237, 0, -0.004219, 0.004237, -0.014065, 0.005706, 0.008511, 0.012658, -0.004167, 0.002789, 0.015299, 0, -0.017808, 0.005579, -0.001387, 0.009722, 0.011004, 0.013605, -0.004027, -0.008086, 0.008152, -0.006739, 0.02171, -0.00664, 0.004011, -0.010652, -0.049799, 0.007082, 0.004219, -0.005602, -0.004225, 0.007072, 0.004213, 0.018182, 0.013736, 0.004065, 0.012146, 0.002667, 0.005319, -0.002646, -0.019894, 0.006766, 0.00672, 0.008011, 0.005298, -0.002635, 0.034346, 0.022989, -0.002497, -0.002503, 0.020075, 0.01107, -0.026764, 0.00375, 0.002491, -0.001242, -0.011194, 0.002516, 0.016311, -0.001235, -0.001236, 0.014851, 0.018293, -0.001198, -0.002398, -0.013221, 0.004872, 0.004848, 0.016888, -0.016607, 0.003619, 0.010817, 0.003567, -0.004739, -0.021429, 0.00365, -0.007273, 0.025641, 0.072619, -0.009989, 0.028027, 0.017448, -0.009646, -0.006494, 0.019608, -0.011752, 0.042162, -0.018672, 0.041226, -0.005076, -0.012245, 0.007231, -0.030769, -0.007407, 0.00533, 0.030753, -0.003086, 0.014448, -0.006104, -0.010235, 0.042399, -0.015873, 0.015121, -0.006951, 0.018, -0.017682, 0.038, 0.072254, 0.097934, 0.040098, -0.029111, -0.010535, -0.01638, 0.019151, -0.02451, 0.022613, -0.054054, -0.024242, 0.01331, 0.019264, 0.016323, -0.049028, -0.041778, 0.013915, 0.065874, 0.003433, -0.010265, -0.021608, 0.004417, -0.039578, 0.010073, -0.009973, 0.039377, 0, -0.072247, 0.022792, 0.036212, 0.024194, 0.000875, 0.01486, -0.013781, -0.00786, -0.007923, -0.01331, -0.026978, 0.009242, -0.004579, -0.00552, -0.026827, -0.020913, 0.015534, 0.003824, 0.006667, 0.015137, 0.010252, 0.028598, -0.012556, 0.017257, 0.019643, -0.002627, -0.032485, 0.00726, -0.007207, -0.000907, 0.011807, 0.017953, -0.002646, -0.009726, 0.022321, 0.022707, 0.064902, -0.007217, -0.01454, 0.008197, 0.006504, -0.012116, 0.015536, 0.005636, 0.009608, 0.04203, -0.024353, 0.013261, -0.003849, 0.031685, 0.024719, -0.019737, -0.03132, 0.026944, 0.017991, 0.030191, -0.023588, 0.045388, 0.012605, -0.008299, 0.041841, 0.014056, -0.011221, -0.020694, 0.025222, -0.03391, 0.020647, 0.006069, 0.058981, -0.058861, -0.006052, -0.025034, 0.062457, 0.017636, -0.008344, -0.011003, 0.002618, -0.007833, -0.030263, 0.032564, 0.004599, 0.039895, 0.046541, 0.075721, 0.005028, 0.041134, -0.079018, 0.005217, 0.099769, 0.048768, -0.014, -0.028905, 0.013055, 0.03866, -0.022333, 0.002538, 0.012658, -0.01, 0.058586, -0.071565, 0.03443, -0.019374, -0.099797, 0.01238, 0.013897, -0.067982, -0.099412, 0.033312, 0.068268, -0.084024, -0.100129, -0.065327, 0.048387, -0.099634, -0.083808, 0.100355, 0.100081, 0.09978, -0.016678, -0.09498, 0.047226, 0.04796, -0.005464, 0.010302, -0.008158, 0.044551, -0.024934, -0.100269, 0.001496, 0.046303, -0.021413, 0.005835, 0.027556, 0.038109, -0.019714, 0.00208, 0.017993, 0.059143, -0.008344, -0.035599, 0.024161, 0.007208, 0.037085, -0.0734, 0.031144, -0.018385, -0.052174, -0.100212, -0.097255, 0.02954, 0.05654, 0.056709, -0.037793, -0.048704, 0.030553, -0.016026, 0.029316, 0.016614, -0.024125, -0.002392, -0.047162, -0.029362, 0.07433, -0.039421, -0.001675, 0.018456, 0.01318, -0.026016, 0.010017, -0.008264, 0.010833, -0.018961, 0.007563, 0.035029, 0.013699, 0.039746, -0.003058, -0.019939, 0.020344, 0.052914, -0.019665, 0.01263, -0.059428, 0.027301, 0.019742, 0, -0.005212, -0.011976, 0.010606, 0.008996, 0.011887, -0.000734, 0.04482, -0.011252, 0.021337, 0.00766, -0.016586, 0.003514, -0.016106, -0.013523, 0.011544, -0.005706, -0.01076, 0.011603, -0.001434, -0.005743, -0.012274, 0.002193, 0.014588, -0.050324, 0.003785, 0.015083, 0.031947, 0.00432, -0.017921, 0.018248, -0.015771, -0.002185, 0.00219, 0.005827, 0.020999, -0.00922, 0.004295, 0.015681, 0.007719, 0.027159, 0.001356, -0.021666, -0.00692, 0.005575, -0.029106, 0.008565, 0.002123, 0.004944, -0.067463, 0.007669, 0.02207, -0.075205, 0.022544, -0.047244, 0.004959, -0.022204, 0.015139, -0.03314, 0.028278, 0.043333, -0.005591, -0.02008, 0.013115, 0.008091, -0.047352, 0.004212, -0.010067, 0.034746, -0.021294, 0.020921, 0.013115, 0.014563, -0.015152, -0.00081, 0.028363, 0.011032, -0.002338, -0.00625, 0.02044, 0.00077, 0.04234, -0.036189, -0.090421, -0.049705, 0.013298, 0.03937, -0.003367, -0.009291, 0.009378, 0.000845, -0.01097, -0.011092, 0.000863, 0.019828, 0.016061, -0.007488, 0.015088, 0.018993, 0.012966, -0.008, -0.012097, -0.012245, 0.008264, 0.00082, -0.009828, 0.035567, -0.009585, -0.006452, 0.021104, 0.005564, -0.012648, -0.010408, 0.017799, -0.005564, 0.014388, 0.004728, 0, -0.020392, -0.007206, -0.020161, -0.002469, 0, 0.002475, 0.004115, -0.004918, -0.004119, -0.00579, 0.023295, 0.006504, 0.003231, -0.012077, -0.030155, 0.003361, 0.033501, -0.004862, -0.007329, 0.009024, -0.003252, -0.019576, -0.002496, 0.003336, 0.010806, -0.006579, -0.003311, -0.003322, -0.003333, -0.005017, 0.028571, -0.004085, 0, 0.007383, 0.003257, -0.00487, -0.008157, -0.016447, 0.000836, 0.015038, -0.011523, 0.006661, -0.002481, 0.002488, 0.013234, -0.005714, -0.010673, 0.009959, -0.000822, 0.007401, 0.000816, 0.001631, 0.016287, 0.008013, 0.007154, -0.002368, -0.011076, 0.0024, 0.039106, -0.006144, 0.001546, 0.007716, -0.007657, -0.001543, -0.002318, 0.030209, -0.007519, 0.001515, 0.024962, -0.008118, 0.026042, -0.015228, -0.011782, -0.00149, 0.006716, 0.000741, -0.022963, -0.007582, 0.008403, -0.011364, -0.011494, 0.031783, 0.016529, -0.011826, 0.007479, 0.001485, 0.004448, 0.008856, 0.000732, 0.018275, -0.001408, -0.014104, -0.018492, 0.000725, 0.000724, 0.01809, 0.001421, -0.001401, 0.007013, -0.029944, 0, -0.008615, 0.01593, 0.001426, -0.000712, 0.000712, 0.002847, -0.016324, 0.003608, -0.015097, 0.005839, 0.002903, 0.02026, -0.002837, -0.007112, -0.000716, 0.003584, -0.007143, 0.017266, 0.000707, 0.001413, 0.004234, 0.016866, 0.005529, -0.004811, -0.006906, 0.008345, 0.009655, 0.000683, 0, -0.004778, 0.006859, 0.010899, 0.014151, -0.014618, 0.022927, 0.005933, -0.005898, -0.001978, -0.008587, 0.00533, -0.005964, -0.001333, 0.002003, -0.003997, 0.004013, -0.000666, -0.003333, 0.004682, -0.020639, -0.003399, 0.000682, -0.00409, 0.002053, -0.002732, 0.00274, 0.002732, -0.035422, -0.004944, -0.023421, -0.003634, 0.02407, 0.000712, -0.006406, 0.020057, 0.001404, -0.008415, -0.002122, 0.010631, -0.01122, -0.001418, 0.00071]
        # ar_date = ['2015-01-01', '2015-01-02', '2015-01-03', '2015-01-04', '2015-01-05', '2015-01-06']
        # am = arch_model(ar, mean='ARX', lags=2)
        #am = arch_model(ar, mean='ARX', lags=2, vol='Garch', p=1, o=0, q=1,power=2.0, dist='Normal', hold_back=None)
        am = arch_model(ar,mean='AR',lags=8,vol='Garch')
        return am.fit().conditional_volatility

    # 测试pandas 读取xls文件
    def printXls(self):
        df = pd.read_excel("TRD_Dalyr.xls")
        df_idx = pd.read_excel("IDX_Idxtrd.xls")
        # df = df.convert_objects(convert_numeric=True)
        df['T'] = df['Dnvaltrd'] / df['Dsmvosd']
        df['MV'] = df['Dsmvosd']
        # 指数回报率
        df['Rm'] = df_idx['Idxtrd08'] / 100
        df['Ri'] = df['Dretnd'] - df['Rm']
        # df['STDi'] = arch.arch_model(df['Dretnd'])
        # df['STDm'] = arch.arch_model(df['Rm'])
        # df['NRm'] = df['Rm'] if df['Rm'] <= 0 else 0
        # df['YRm'] = df['Rm'] if df['Rm'] > 0 else 0
        df['TM'] = df['Dsmvosd'] / df['T']
        print(df.head())
        # print arch_model(df['Dretnd'], p=1, q=1).fit(update_freq=10).summary()
        print(arch_model(df['Dretnd'], p=1, q=1).fit())
        # write = ExcelWriter("output.xls")

